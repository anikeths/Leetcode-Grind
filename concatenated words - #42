class Solution:
    def findAllConcatenatedWordsInADict(self, words: List[str]) -> List[str]:
#         li=[]
#         for i in range(1,len(words)):
#             if(len(words[i])> len(words[i-1])):
#                 li.append(words[i])
        
#         print(li)
        
        d={}  #python dictionary


        base=[]
        values= []
        for i in range(len(words)):   
            for j in range(i+1, len(words)):  
                  if(words[i] in words[j]):
#                 
                    base.append((words[i],words[j]))
                    # print(words[i],words[j])
                    
        for b in base:
             d.setdefault(b[0],[]).append(b[1])
        
        # print(d)
         
        s= set()
        
        valist=[]
    
        for val in d.values():
                # print(val)
                valist.append(val)
                for v in val:
                     s.add(v)
            

        keylist = list(d.keys())
        ind=[]
        
        res=[]
        
#         print("keys:",keylist)
        
#         print("values:",s)

        for l in list(s):
            for i in range(len(keylist)):
                for j in range(i+1,len(keylist)):
                     if(keylist[i] in l) and (keylist[j] in l) and len(keylist[i]) != len(l) and len(keylist[j])!=  len(l):
                               res.append(l)
                    
                           
                
               
        return (list(set(res)))



*****alternate half-solved*******


class Solution:
    def findAllConcatenatedWordsInADict(self, words: List[str]) -> List[str]:
        li=[]
        for i in range(1,len(words)):
            if(len(words[i])> len(words[i-1])):
                li.append(words[i])
        
        print(li)
        
        d={}  #python dictionary


        base=[]
        values= []
        for i in range(len(words)):   
            for j in range(i+1, len(words)):  
                  if(words[i] in words[j]):
#                 
                    base.append((words[i],words[j]))
                    # print(words[i],words[j])
                    
        for b in base:
             d.setdefault(b[0],[]).append(b[1])
                


        print(d)
            
   
